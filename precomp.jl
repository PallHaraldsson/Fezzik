using Pkg
empty!(Base.LOAD_PATH)
# Take LOAD_PATH from parent process
append!(Base.LOAD_PATH, ["@", "@v#.#", "@stdlib"])



# bring recursive dependencies of used packages and standard libraries into namespace
using Pkg
Pkg.activate()
#Pkg.instantiate()
using Fezzik
packages = Set(Symbol[:Revise, :Lazy, :CodeTools, :REPL, :LibGit2, :Sockets, :OrderedCollections, :Logging, :Base, :Juno, :Core, :Pkg, :Requires, :Atom, :JSON, :Media, :FileWatching, :Fezzik])

failed_packages = Vector{Symbol}()
for p in packages
    Fezzik.@reveal_loaded_packages
    if isdefined(@__MODULE__,p)
        if typeof(Core.eval(@__MODULE__,p)) === Module
            loaded = Core.eval(@__MODULE__,p)
            println("[$p] already loaded")
            continue
        end
    end
    try
        println("using $p")
        Core.eval(@__MODULE__, :(using $p))
    catch
        try
            Pkg.add("$p")
            Core.eval(@__MODULE__, :(using $p))
        catch e
            @warn e
            @warn "could not import $p"
            push!(failed_packages,p)
        end
    end
end



LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.LineEdit.PrefixSearchState, Symbol, REPL.LineEdit.InputAreaState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done), Tuple{String, typeof(Base.input_color), REPL.LineEditREPL, REPL.ShellCompletionProvider, getfield(REPL, Symbol("#do_respond#38")){Bool, getfield(REPL, Symbol("##46#55")){REPL.LineEditREPL}, REPL.LineEditREPL, REPL.LineEdit.Prompt}}}, Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :keymap_dict, :repl, :complete, :on_enter, :on_done, :hist, :sticky), T} where T<:Tuple}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{Char}, Int32}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.StreamingParserState{Sockets.TCPSocket}, UInt8, UInt8, UInt8}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.popfirst!), Array{String, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.init_state), REPL.Terminals.TTYTerminal, REPL.LineEdit.PrefixHistoryPrompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{REPL.Terminals.TextTerminal}, REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#14")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Fezzik, Symbol("##3#4")){Base.Set{Symbol}}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:indent, :region_active), Tuple{Int64, Bool}}, Type{NamedTuple{(:indent, :region_active), T} where T<:Tuple}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.println), Sockets.TCPSocket, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Nothing}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Function}, getfield(Atom, Symbol("##2#7")), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.banner), REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##with_output_color#671")), Bool, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{Union{Array{String, 1}, Array{Pkg.REPLMode.Option, 1}}}, Array{Pkg.REPLMode.Option, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{REPL.REPLHistoryProvider}, Base.Dict{Symbol, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getproperty), Base.Condition, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.hist_from_file), REPL.REPLHistoryProvider, Base.IOStream, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getindex), NamedTuple{(:prompt_prefix, :prompt_suffix, :complete, :sticky), Tuple{String, String, Pkg.REPLMode.PkgCompletionProvider, Bool}}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Revise, Symbol("##67#68")){getfield(Atom, Symbol("##131#133"))}, Base.Dict{String, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##27#28")){getfield(REPL.LineEdit, Symbol("##131#183")), String}, REPL.LineEdit.MIState, REPL.LineEditREPL}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.show), Base.IOContext{REPL.Terminals.TTYTerminal}, Base.MIME{Symbol("text/plain")}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base.Filesystem, Symbol("##mkpath#8")), UInt16, typeof(Base.Filesystem.mkpath), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.write_prompt), REPL.Terminals.TerminalBuffer, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.handlemsg), Base.Dict{String, Any}, Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom, Symbol("##1#6")), REPL.LineEditREPL}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##27#28")){getfield(REPL.LineEdit, Symbol("##250#254")){REPL.LineEdit.PrefixHistoryPrompt}, String}, REPL.LineEdit.MIState, REPL.LineEditREPL}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:bare, :checkout_branch, :remote_cb), Tuple{Int32, Base.Cstring, Ptr{Nothing}}}}, Type{NamedTuple{(:fetch_opts,), Tuple{LibGit2.FetchOptionsStruct}}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{UInt64}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.prompt_string), typeof(Base.input_color)}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getproperty), REPL.LineEdit.MIState, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.state), REPL.LineEdit.MIState, REPL.LineEdit.PrefixHistoryPrompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.reset_state), REPL.LineEdit.PrefixSearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.lastindex), Array{String, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Filesystem.expanduser), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Media, Symbol("##getdisplay#13")), Nothing, typeof(Media.getdisplay), Type{Nothing}, Base.Dict{Any, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom, Symbol("##170#171")), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Requires.listenpkg), getfield(Atom, Symbol("##3#8")), Base.PkgId}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.push!), Array{Tuple{Module, String, Float64}, 1}, Tuple{Module, String, Float64}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_enter), Tuple{String, typeof(Base.input_color), REPL.LineEditREPL, REPL.REPLCompletionProvider, typeof(REPL.return_callback)}}, Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :keymap_dict, :repl, :complete, :on_enter, :on_done, :hist, :sticky), T} where T<:Tuple}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), getfield(Media, Symbol("##11#12")){DataType}, NamedTuple{(:init,), Tuple{DataType}}, Base.KeySet{Any, Base.Dict{Any, Any}}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#13")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.Terminals.hascolor), REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base.CoreLogging, Symbol("#kw##handle_message")), NamedTuple{(:linenum, :filename), Tuple{Int64, String}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##sprint#340")), Nothing, Int64, typeof(Base.sprint), typeof(JSON.Writer.print), Array{Any, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(+)), Int64, Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.write), REPL.Terminals.TTYTerminal, Array{UInt8, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.match_input), getfield(REPL.LineEdit, Symbol("##131#183")), REPL.LineEdit.MIState, REPL.Terminals.TTYTerminal, Array{Char, 1}, Base.Dict{Char, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.divrem), Int64, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.sym_in), Symbol, Tuple{Symbol}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.render′), Nothing}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Pkg.REPLMode, Symbol("#kw##do_cmd")), NamedTuple{(:do_rethrow,), Tuple{Bool}}, typeof(Pkg.REPLMode.do_cmd), Pkg.REPLMode.MiniREPL, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.history_move_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, String, Bool, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.haskey), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done), Tuple{String, typeof(Base.input_color), REPL.LineEditREPL, REPL.REPLCompletionProvider, getfield(REPL, Symbol("#do_respond#38")){Bool, typeof(REPL.helpmode), REPL.LineEditREPL, REPL.LineEdit.Prompt}}}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getindex), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done), Tuple{String, typeof(Base.input_color), REPL.LineEditREPL, REPL.ShellCompletionProvider, getfield(REPL, Symbol("#do_respond#38")){Bool, getfield(REPL, Symbol("##46#55")){REPL.LineEditREPL}, REPL.LineEditREPL, REPL.LineEdit.Prompt}}}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Base.MIME{Symbol("text/plain")}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(==)), Nothing, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.Prompt, REPL.LineEdit.MIState, REPL.Terminals.TTYTerminal, REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##131#183")), REPL.LineEdit.MIState, REPL.LineEditREPL, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.Prompt, REPL.LineEdit.PromptState, REPL.Terminals.TerminalBuffer, REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.haskey), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done), Tuple{String, typeof(Base.input_color), REPL.LineEditREPL, REPL.ShellCompletionProvider, getfield(REPL, Symbol("#do_respond#38")){Bool, getfield(REPL, Symbol("##46#55")){REPL.LineEditREPL}, REPL.LineEditREPL, REPL.LineEdit.Prompt}}}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.haskey), NamedTuple{(:indent, :region_active), Tuple{Int64, Bool}}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.in), String, Tuple{String, String, String}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.refresh_line), REPL.LineEdit.PrefixSearchState, REPL.Terminals.TerminalBuffer}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.PrefixSearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.in), String, Array{String, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom, Symbol("##19#21")){Array{Any, 1}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.ncodeunits), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##735#737")), REPL.REPLBackend}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.prompt_string), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.keymap_merge), Base.Dict{Char, Any}, Base.Dict{Any, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.strip), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{Ptr{Nothing}}, Ptr{UInt8}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##with_output_color#671")), Bool, typeof(Base.with_output_color), typeof(Base.print), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom.Progress, Symbol("##handle_message#1")), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:linenum, :filename), Tuple{Int64, String}}}, typeof(Base.CoreLogging.handle_message), Atom.Progress.JunoProgressLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.iterate), Array{REPL.LineEdit.TextInterface, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.run_interface), REPL.Terminals.TTYTerminal, REPL.LineEdit.ModalInterface, REPL.LineEdit.MIState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getindex), NamedTuple{(:indent, :region_active), Tuple{Int64, Bool}}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##27#28")){getfield(REPL.LineEdit, Symbol("##109#161")), String}, REPL.LineEdit.MIState, REPL.LineEditREPL}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Pkg.REPLMode, Symbol("##do_cmd#30")), Bool, typeof(Pkg.REPLMode.do_cmd), Pkg.REPLMode.MiniREPL, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(==)), Module, Nothing}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.push!), Base.Set{String}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.haskey), NamedTuple{(:prompt_prefix, :prompt_suffix, :complete, :sticky), Tuple{String, String, Pkg.REPLMode.PkgCompletionProvider, Bool}}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom, Symbol("##changeREPLprompt#161")), Symbol, Bool, typeof(Atom.changeREPLprompt), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.LineEdit.MIState, Symbol, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(==)), Array{Char, 1}, Array{Char, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.deactivate_region), REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.tostr_sizehint), Base.VersionNumber}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Pkg.API, Symbol("##activate#71")), Bool, typeof(Pkg.API.activate), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom, Symbol("##18#20"))}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("#kw##refresh_multi_line")), NamedTuple{(:indent, :region_active), Tuple{Int64, Bool}}, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.TTYTerminal, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.InputAreaState, REPL.LineEdit.PrefixSearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.keymap_data), REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PrefixHistoryPrompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, IO}}, Base.IOStream}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.cancel_beep), REPL.LineEdit.PrefixSearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Int64, Nothing}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{REPL.LineEdit.PromptState}, REPL.Terminals.TTYTerminal, REPL.LineEdit.Prompt, Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Array{Base.GenericIOBuffer{Array{UInt8, 1}}, 1}, Int64, REPL.LineEdit.InputAreaState, Int64, Base.Threads.TatasLock, Float64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Int64}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.take!), Base.GenericIOBuffer{Array{UInt8, 1}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.push!), Array{Char, 1}, Char}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Filesystem.homedir)}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done), Tuple{String, typeof(Base.input_color), REPL.LineEditREPL, REPL.REPLCompletionProvider, getfield(REPL, Symbol("#do_respond#38")){Bool, typeof(REPL.helpmode), REPL.LineEditREPL, REPL.LineEdit.Prompt}}}, Type{REPL.LineEdit.Prompt}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##44#75"))}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##45#76"))}, Base.Pair{Char, getfield(REPL.LineEdit, Symbol("##46#77")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{Char, Char}, Base.Pair{Char, getfield(REPL.LineEdit, Symbol("##47#78"))}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##48#79"))}, Base.Pair{Char, getfield(REPL.LineEdit, Symbol("##49#80"))}, Base.Pair{Int64, REPL.LineEdit.KeyAlias}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##50#81"))}, Base.Pair{String, String}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##51#82"))}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##52#83"))}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##53#84")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##54#85"))}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##55#86"))}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##56#87")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##57#88")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##58#89")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##59#90")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##60#91")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##61#92")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##62#93")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##63#94")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##64#95")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##65#96")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##66#97"))}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##67#98")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##68#99")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##69#100"))}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##70#101"))}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##71#102"))}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##72#103"))}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom, Symbol("##210#211")), Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.terminal), REPL.LineEdit.MIState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{Symbol, String}, Base.Pair{Symbol, String}, Base.Pair{Symbol, Bool}}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.refresh_line), REPL.LineEdit.PromptState, REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.find_package), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool}, Int64, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getproperty), REPL.LineEditREPL, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.leading_ones), UInt8}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Logging.showvalue), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.string), String, String, String, Symbol, String, String, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_enter), Tuple{String, typeof(Base.input_color), REPL.LineEditREPL, REPL.REPLCompletionProvider, typeof(REPL.return_callback)}}, Type{REPL.LineEdit.Prompt}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL, Symbol("##32#34")){REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, Int64}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Multimedia.display), REPL.REPLDisplay{REPL.LineEditREPL}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##25#26")), REPL.LineEdit.MIState, REPL.LineEditREPL}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:prompt_prefix, :prompt_suffix, :complete, :sticky), Tuple{String, String, Pkg.REPLMode.PkgCompletionProvider, Bool}}, Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :keymap_dict, :repl, :complete, :on_enter, :on_done, :hist, :sticky), T} where T<:Tuple}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.mapreduce_first), typeof(Base.identity), getfield(Media, Symbol("##11#12")){DataType}, Type{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.peek), Base.IOStream}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom, Symbol("##202#203")), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(JSON.Parser.parse), Sockets.TCPSocket}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit._clear_input_area), REPL.Terminals.TerminalBuffer, REPL.LineEdit.InputAreaState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Int32}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.__atreplinit), REPL.LineEditREPL}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{NamedTuple{(:indent, :region_active), T} where T<:Tuple}, Tuple{Int64, Bool}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.replace_line), REPL.LineEdit.PromptState, Base.GenericIOBuffer{Array{UInt8, 1}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._promote_typejoin), Type{Union{}}, Type{Int64}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##schedule#443")), Bool, typeof(Base.schedule), Task, Nothing}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(-)), Char, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.ends_with_semicolon), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.connect), Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{REPL.LineEditREPL}, REPL.Terminals.TTYTerminal, Bool, Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.reinterpret), Type{Char}, UInt32}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#16")), Int64, Bool, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.TTYTerminal, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.InputAreaState, REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.normalize_key), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Char}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(==)), Media.DisplayHook, REPL.REPLDisplay{REPL.LineEditREPL}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##301#302")){Base.IOStream}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Char, Bool}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("#kw##add_nested_key!")), NamedTuple{(:override,), Tuple{Bool}}, typeof(REPL.LineEdit.add_nested_key!), Base.Dict{Char, Any}, String, Nothing}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Int64, Int64}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL, Symbol("##48#57")){REPL.LineEditREPL, REPL.REPLHistoryProvider}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, IO}}, Nothing}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.VersionNumber}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##256#257"))}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom, Symbol("##connect#17")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Atom.connect), Sockets.IPv4, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(!=)), REPL.LineEdit.Prompt, Nothing}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.iterate), Array{REPL.LineEdit.TextInterface, 1}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Filesystem.ispath), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Expr, Int64}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Filesystem.splitpath), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL, Symbol("#do_respond#38")){Bool, getfield(Atom, Symbol("##170#171")), REPL.LineEditREPL, REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Base.GenericIOBuffer{Array{UInt8, 1}}, Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(==)), Base.SubString{String}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.reset_state), REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom, Symbol("##194#195")), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Module, Revise.FMMaps}, Revise.FMMaps, Module}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##add_nested_key!#22")), Bool, typeof(REPL.LineEdit.add_nested_key!), Base.Dict{Char, Any}, String, Nothing}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.write), REPL.Terminals.TTYTerminal, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Fezzik, Symbol("##3#4")){Base.Set{Symbol}}, Expr}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.MIState, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Multimedia.pushdisplay), REPL.REPLDisplay{REPL.LineEditREPL}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Any}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.transition), getfield(REPL.LineEdit, Symbol("##256#257")), REPL.LineEdit.MIState, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("##49#58")){REPL.LineEdit.Prompt}}, Base.Pair{Char, getfield(REPL, Symbol("##51#60")){REPL.LineEdit.Prompt}}, Base.Pair{String, getfield(REPL, Symbol("##53#62"))}, Base.Pair{String, getfield(REPL, Symbol("##54#63"))}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.ends_with_semicolon), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.add_history), REPL.REPLHistoryProvider, REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Meta.parse), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Logging.showvalue), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.run_repl), REPL.LineEditREPL, getfield(Base, Symbol("##735#737"))}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.isempty), NamedTuple{(), Tuple{}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Nothing, Int64}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.reset_state), REPL.LineEdit.SearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.refresh_line), REPL.LineEdit.PromptState, REPL.Terminals.TerminalBuffer}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{REPL.REPLHistoryProvider}, Array{String, 1}, Nothing, Int64, Int64, Int64, Base.GenericIOBuffer{Array{UInt8, 1}}, Nothing, Base.Dict{Symbol, Any}, Array{UInt8, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.REPLHistoryProvider, Symbol, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.TTYTerminal, REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##open#309")), Nothing, Nothing, Nothing, Bool, Nothing, typeof(Base.open), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##open#310")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Fezzik, Symbol("##1#2")){Base.Set{String}}, String, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##s72#143")), Tuple{Symbol}, Tuple{Symbol}, Type{typeof(Base.merge)}, Type{NamedTuple{(:callbacks,), Tuple{Base.Dict{Symbol, Tuple{Ptr{Nothing}, Any}}}}}, Type{NamedTuple{(:credentials,), Tuple{LibGit2.CachedCredentials}}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.CoreLogging.min_enabled_level), Logging.ConsoleLogger}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{REPL.LineEdit.PrefixSearchState}, REPL.Terminals.TTYTerminal, REPL.LineEdit.PrefixHistoryPrompt, String, Base.GenericIOBuffer{Array{UInt8, 1}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##open#309")), Bool, Bool, Bool, Nothing, Nothing, typeof(Base.open), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_activate!), Array{String, 1}, Base.Dict{Symbol, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{Array{String, 1}}, Array{String, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##73#104")){REPL.LineEdit.HistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##74#105")){REPL.LineEdit.HistoryPrompt}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getproperty), REPL.LineEdit.ModalInterface, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{REPL.LineEdit.TextInterface}, REPL.LineEdit.PrefixHistoryPrompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.read), REPL.Terminals.TTYTerminal, Type{Char}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(==)), REPL.REPLDisplay{REPL.LineEditREPL}, REPL.REPLDisplay{REPL.LineEditREPL}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.tostr_sizehint), Base.SubString{String}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{Array{Char, 1}}, Array{Char, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Pkg.REPLMode.is_opt), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Char, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.write), Base.TTY, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.REPLHistoryProvider, Symbol, Base.GenericIOBuffer{Array{UInt8, 1}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._uv_hook_close), Base.Timer}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Fezzik.bootstrap)}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.LineEdit.Prompt, Symbol, Base.Dict{Char, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.REPLHistoryProvider, Symbol, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.alloc_buf_hook), Base.TTY, UInt64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getproperty), REPL.LineEdit.PrefixSearchState, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(<<)), UInt32, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.isempty), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.string), String, Base.SubString{String}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), Pkg.REPLMode.Statement, Symbol, Pkg.REPLMode.CommandSpec}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Revise.Rescheduler{typeof(Revise.watch_manifest), Tuple{String}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.LineEdit.PrefixSearchState, Symbol, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Multimedia.display), Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{String}, Array{UInt8, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{REPL.LineEditREPL}, REPL.Terminals.TTYTerminal, Bool, String, String, String, String, String, Bool, Bool, Bool, Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Type{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Juno.Console, Type{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Fezzik, Symbol("##3#4")){Base.Set{Symbol}}, QuoteNode}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getindex), String, Base.UnitRange{Int64}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.push!), Array{String, 1}, Base.SubString{String}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##invokelatest#1")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.invokelatest), typeof(Pkg.REPLMode.do_activate!), Array{String, 1}, Base.Dict{Symbol, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("#readcb_specialized#489")), Sockets.TCPSocket, Int64, UInt64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{Base.Dict{Char, V} where V}, Base.Dict{Char, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getproperty), REPL.LineEdit.HistoryPrompt, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._iterate), Base.Dict{Symbol, Any}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(==)), Base.SubString{String}, Base.SubString{String}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(<=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{REPL.LineEdit.Prompt}, String, String, typeof(Base.input_color), Base.Dict{Char, Any}, REPL.LineEditREPL, REPL.REPLCompletionProvider, typeof(REPL.return_callback), getfield(REPL.LineEdit, Symbol("##260#262")), REPL.LineEdit.EmptyHistoryProvider, Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.init_state), REPL.Terminals.TTYTerminal, REPL.LineEdit.HistoryPrompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.split), String, Char}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.reset_state), REPL.REPLHistoryProvider}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.prepend!), Array{Base.Dict{Any, Any}, 1}, Array{Base.Dict{Any, Any}, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##236#244")), REPL.LineEdit.MIState, REPL.LineEdit.PrefixSearchState, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base.Meta, Symbol("##parse#4")), Bool, Bool, typeof(Base.Meta.parse), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.write), Base.TTY, UInt8}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(!=)), Int64, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.init_state), REPL.Terminals.TTYTerminal, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, REPL.Terminals.TTYTerminal, Base.Pair{Symbol, Module}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.on_enter), REPL.LineEdit.MIState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.skip_deleted_floor!), Base.Dict{Symbol, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom, Symbol("##151#152")), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.reduce_first), getfield(Media, Symbol("##11#12")){DataType}, Type{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Lazy.c), String, Int64, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL, Symbol("##setup_interface#45")), Bool, Array{Base.Dict{Any, Any}, 1}, typeof(REPL.setup_interface), REPL.LineEditREPL}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getproperty), REPL.LineEdit.Prompt, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.write_prompt), REPL.Terminals.TerminalBuffer, REPL.LineEdit.PrefixSearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Logging, Symbol("##handle_message#2")), Nothing, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:linenum, :filename), Tuple{Int64, String}}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{REPL.REPLDisplay{R} where R<:REPL.AbstractREPL}, REPL.LineEditREPL}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Fezzik, Symbol("##3#4")){Base.Set{Symbol}}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.LineEdit.PrefixHistoryPrompt, Symbol, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.include), Module, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getindex), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done), Tuple{String, typeof(Base.input_color), REPL.LineEditREPL, REPL.REPLCompletionProvider, getfield(REPL, Symbol("#do_respond#38")){Bool, typeof(REPL.helpmode), REPL.LineEditREPL, REPL.LineEdit.Prompt}}}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{UInt32}, UInt8}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{NamedTuple{(:do_rethrow,), T} where T<:Tuple}, Tuple{Bool}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.seek), Base.IOStream, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("#kw##refresh_multi_line")), NamedTuple{(:indent, :region_active), Tuple{Int64, Bool}}, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.TTYTerminal, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.InputAreaState, REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.transition), getfield(REPL, Symbol("##32#34")){REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, Int64}, REPL.LineEdit.PrefixSearchState, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.println), Base.TTY, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.get), Base.Dict{Char, Any}, Char, Nothing}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.LineEdit.PrefixSearchState, Symbol, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.print), REPL.Terminals.TTYTerminal, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{DataType}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.findprev), Base.Fix2{typeof(Base.isequal), Char}, String, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##replace#338")), Int64, typeof(Base.replace), String, Base.Pair{String, String}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Media.distance), Type{Nothing}, Type{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.handlemsg), Base.Dict{String, Any}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_enter), T} where T<:Tuple}, Tuple{String, typeof(Base.input_color), REPL.LineEditREPL, REPL.REPLCompletionProvider, typeof(REPL.return_callback)}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int32, Base.Cstring, Ptr{Nothing}}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done), T} where T<:Tuple}, Tuple{String, typeof(Base.input_color), REPL.LineEditREPL, REPL.REPLCompletionProvider, getfield(REPL, Symbol("#do_respond#38")){Bool, typeof(REPL.helpmode), REPL.LineEditREPL, REPL.LineEdit.Prompt}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.pushfirst!), Array{String, 1}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.handlemsg), Base.Dict{String, Any}, Base.Dict{String, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), getfield(Media, Symbol("##11#12")){DataType}, NamedTuple{(), Tuple{}}, Base.KeySet{Any, Base.Dict{Any, Any}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.unsafe_write), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{UInt8}, UInt64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Media, Symbol("##11#12")){DataType}, Type{Any}, Type{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Revise, Symbol("##57#59")){REPL.REPLBackend}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("##39#42")){REPL.LineEdit.Prompt}}, Base.Pair{String, getfield(REPL, Symbol("##41#44")){REPL.LineEdit.Prompt}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Atom.Progress.JunoProgressLogger, Base.CoreLogging.LogLevel, Module, String, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, REPL.LineEdit.Prompt}}, Nothing}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, REPL.LineEdit.Prompt, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{Base.Dict{String, Revise.FileInfo}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.Terminals.cmove_col), REPL.Terminals.TerminalBuffer, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.history_prev_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._promote_typejoin), Type{Int64}, Type{String}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.alloc_buf_hook), Sockets.TCPSocket, UInt64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{Char, Any}, REPL.LineEdit.MIState, REPL.Terminals.TTYTerminal, Array{Char, 1}, Base.Dict{Char, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.render′), Juno.Console, Nothing}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#13")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.PrefixSearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom, Symbol("##196#197"))}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{REPL.LineEdit.TextInterface}, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Ptr{Nothing}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{REPL.LineEdit.Prompt}, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.reset_state), REPL.LineEdit.MIState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Pkg.REPLMode, Symbol("#@pkg_str")), LineNumberNode, Module, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.seek), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.LineEdit.PrefixSearchState, Symbol, REPL.LineEdit.MIState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.haskey), Base.EnvDict, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.buffer), REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(!=)), String, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.ModalInterface, REPL.LineEdit.MIState, REPL.Terminals.TTYTerminal, REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getproperty), REPL.LineEdit.PrefixHistoryPrompt, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, String, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Revise.steal_repl_backend), REPL.REPLBackend}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Core.Compiler, Symbol("##185#186")), Core.Compiler.Const, Type{Base.Multimedia.AbstractDisplay}, Type{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Media.media), Type{Nothing}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.unsafe_write), Base.TTY, Ptr{UInt8}, UInt64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.state), REPL.LineEdit.MIState, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._promote_typejoin), Type{Int32}, Type{Base.Cstring}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, REPL.LineEdit.Prompt}, Base.Pair{Symbol, REPL.LineEdit.Prompt}, Base.Pair{Symbol, REPL.LineEdit.Prompt}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL, Symbol("##26#27")){REPL.REPLBackend}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{Array{Symbol, 1}}, Array{UInt8, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Core.Compiler, Symbol("##185#186")), Type{Union{Nothing, Function}}, Type{Base.Dict{Symbol, Any}}, Type{Union{Array{String, 1}, Array{Pkg.Types.PackageSpec, 1}, Array{Pkg.Types.RegistrySpec, 1}}}, Type{Base.Dict{Symbol, Any}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.write_prompt), REPL.Terminals.TerminalBuffer, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.getmodule′), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom, Symbol("##157#158")), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.copy), Base.GenericIOBuffer{Array{UInt8, 1}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done), Tuple{String, typeof(Base.input_color), REPL.LineEditREPL, REPL.REPLCompletionProvider, getfield(REPL, Symbol("#do_respond#38")){Bool, typeof(REPL.helpmode), REPL.LineEditREPL, REPL.LineEdit.Prompt}}}, Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :keymap_dict, :repl, :complete, :on_enter, :on_done, :hist, :sticky), T} where T<:Tuple}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##38#39")){REPL.LineEdit.MIState, REPL.LineEdit.PrefixHistoryPrompt, REPL.LineEdit.Prompt}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom, Symbol("##2#7"))}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.changeREPLmodule), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Filesystem.relpath), String, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Expr, Int64}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.findlast), Base.Fix2{typeof(Base.isequal), Char}, Base.SubString{String}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.identity), Array{String, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.keymap), REPL.LineEdit.PrefixSearchState, REPL.LineEdit.PrefixHistoryPrompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Pkg, Symbol("##1#2")), REPL.LineEditREPL}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, String, Int64, String, String, String}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.eof), Base.IOStream}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.sizeof), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.terminal), REPL.LineEdit.PrefixSearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.Prompt, REPL.LineEdit.PromptState, REPL.Terminals.TTYTerminal, REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.Terminals.clear_line), REPL.Terminals.TerminalBuffer}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.history_move), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, Int64, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{Base.MIME{Symbol("text/plain")}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.findlast), Base.Fix2{typeof(Base.isequal), Char}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base.CoreLogging, Symbol("#kw##handle_message")), NamedTuple{(:linenum, :filename), Tuple{Int64, String}}, typeof(Base.CoreLogging.handle_message), Atom.Progress.JunoProgressLogger, Base.CoreLogging.LogLevel, String, Module, String, Symbol, String, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##109#161")), REPL.LineEdit.MIState, REPL.LineEditREPL, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{Pkg.REPLMode.PkgCommand}, Pkg.REPLMode.CommandSpec, Base.Dict{Symbol, Any}, Array{String, 1}, Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.flush), Base.IOStream}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.take!), Base.Channel{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Pkg.REPLMode.do_activate!), Array{String, 1}, Base.Dict{Symbol, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Char, Char}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.eof), Base.GenericIOBuffer{Array{UInt8, 1}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{REPL.LineEdit.InputAreaState}, REPL.LineEdit.InputAreaState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.update_key_repeats), REPL.LineEdit.MIState, Array{Char, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getproperty), REPL.LineEdit.PromptState, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.haskey), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_enter), Tuple{String, typeof(Base.input_color), REPL.LineEditREPL, REPL.REPLCompletionProvider, typeof(REPL.return_callback)}}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :complete, :sticky), T} where T<:Tuple}, Tuple{String, String, Pkg.REPLMode.PkgCompletionProvider, Bool}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.repl_color), String, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("#is_shift_move#12")), Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Unicode.textwidth), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getindex), Base.RefValue{Pkg.REPLMode.MiniREPL}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.activate), REPL.LineEdit.PrefixHistoryPrompt, REPL.LineEdit.PrefixSearchState, REPL.Terminals.TerminalBuffer, REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.start_repl_backend), Base.Channel{Any}, Base.Channel{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Revise, Symbol("##18#19")){Base.PkgId}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.evalrepl), Module, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Fezzik, Symbol("##3#4")){Base.Set{Symbol}}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.uvfinalize), Base.Timer}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#17")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TTYTerminal, REPL.LineEdit.PrefixSearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{REPL.LineEdit.SearchState}, REPL.Terminals.TTYTerminal, REPL.LineEdit.HistoryPrompt, Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.GenericIOBuffer{Array{UInt8, 1}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.Terminals.width), REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.require), Module, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##734#736")){Bool, Bool, Bool, Bool}, Module}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Pkg.REPLMode.create_mode), REPL.LineEditREPL, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Revise, Symbol("##58#60")){REPL.REPLBackend}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.LineEdit.MIState, Symbol, Array{Char, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_done), T} where T<:Tuple}, Tuple{String, typeof(Base.input_color), REPL.LineEditREPL, REPL.ShellCompletionProvider, getfield(REPL, Symbol("#do_respond#38")){Bool, getfield(REPL, Symbol("##46#55")){REPL.LineEditREPL}, REPL.LineEditREPL, REPL.LineEdit.Prompt}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.push_undo), REPL.LineEdit.PromptState, Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Nothing}, Int64, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##open#310")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("##655#656")){String, Base.UUID, String}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{Char, Any}, REPL.LineEdit.MIState, Base.GenericIOBuffer{Array{UInt8, 1}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.println), REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nexprs")), LineNumberNode, Module, Int64, Expr}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{NamedTuple{(), T} where T<:Tuple}, Tuple{}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.push!), Array{Symbol, 1}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.include_string), Module, String, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Int64, String}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.normalize_keys), Base.Dict{Any, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.firstindex), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{Char, Any}, REPL.LineEdit.MIState, Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Char, 1}, Base.Dict{Char, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.handlemsg), String, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.send_to_backend), Int64, Base.Channel{Any}, Base.Channel{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.delete!), Base.Set{Any}, Char}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Char, Bool}, Int64, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._promote_typejoin), Type{Base.Pair{Symbol, String}}, Type{Base.Pair{Symbol, Bool}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.lastindex), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.LineEditREPL, Symbol, Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.strip), Base.SubString{String}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.input_color)}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.LineEdit.PrefixSearchState, Symbol, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.something), REPL.LineEdit.Prompt, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, REPL.LineEdit.Prompt}}, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(FileWatching.watch_file), String, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.read), Base.TTY, Type{UInt8}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.terminal), REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.return_callback), REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.isequal), REPL.LineEdit.Prompt, REPL.LineEdit.Prompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.get), Base.Dict{String, Base.Dict{String, Pkg.REPLMode.CommandSpec}}, String, Nothing}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(>)), Base.VersionNumber, Base.VersionNumber}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{Bool}, Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.msg), String, Int64, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getproperty), REPL.Terminals.TTYTerminal, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.commit_changes), REPL.Terminals.TTYTerminal, REPL.Terminals.TerminalBuffer}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Nothing}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.handlemsg), Base.Dict{String, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.print), Base.IOStream, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getindex), NamedTuple{(:prompt_prefix, :prompt_suffix, :repl, :complete, :on_enter), Tuple{String, typeof(Base.input_color), REPL.LineEditREPL, REPL.REPLCompletionProvider, typeof(REPL.return_callback)}}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.eof), Base.TTY}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.LineEdit.PromptState, Symbol, REPL.LineEdit.InputAreaState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.match_input), Base.Dict{Char, Any}, REPL.LineEdit.MIState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.eof), REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Fezzik, Symbol("##bootstrap#5")), Bool, typeof(Fezzik.bootstrap)}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.replace), Base.SubString{String}, Base.Pair{Base.Regex, String}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##42#43")){REPL.LineEdit.MIState, REPL.LineEdit.PrefixHistoryPrompt, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.Prompt}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Char}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.reseteof), REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.check_open), Base.TTY}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Filesystem.readdir)}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TTYTerminal, REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.keymap_unify), Array{Base.Dict{Any, Any}, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._promote_typejoin), Type{Base.Pair{Symbol, String}}, Type{Base.Pair{Symbol, String}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.rstrip), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL, Symbol("#do_respond#38")){Bool, getfield(REPL, Symbol("##48#57")){REPL.LineEditREPL, REPL.REPLHistoryProvider}, REPL.LineEditREPL, REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, Base.GenericIOBuffer{Array{UInt8, 1}}, Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Function}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#17")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TTYTerminal, REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{REPL.LineEdit.MIState}, REPL.LineEdit.MIState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##Prompt#258")), String, typeof(Base.input_color), Base.Dict{Char, Any}, REPL.LineEditREPL, REPL.REPLCompletionProvider, typeof(REPL.LineEdit.default_enter_cb), getfield(REPL, Symbol("#do_respond#38")){Bool, typeof(REPL.helpmode), REPL.LineEditREPL, REPL.LineEdit.Prompt}, REPL.LineEdit.EmptyHistoryProvider, Bool, Type{REPL.LineEdit.Prompt}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(==)), String, Nothing}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base.Meta, Symbol("##parse#1")), Bool, Bool, Bool, typeof(Base.Meta.parse), String, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.Terminals.disable_bracketed_paste), REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), getfield(Media, Symbol("##11#12")){DataType}, Base.IndexLinear, Array{Any, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:callbacks,), Tuple{Base.Dict{Symbol, Tuple{Ptr{Nothing}, Any}}}}}, Type{NamedTuple{(:credentials,), Tuple{LibGit2.CachedCredentials}}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, Type{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.edit_insert), REPL.LineEdit.PromptState, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#37")), Bool, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.TTYTerminal, REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#37")), Bool, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.TTYTerminal, REPL.LineEdit.PrefixSearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{Ptr{Nothing}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._mapreduce_dim), typeof(Base.identity), getfield(Media, Symbol("##11#12")){DataType}, NamedTuple{(), Tuple{}}, Array{Any, 1}, Base.Colon}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.identity), Type{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#16")), Int64, Bool, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.TTYTerminal, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.InputAreaState, REPL.LineEdit.PrefixSearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##27#28")){getfield(REPL.LineEdit, Symbol("##236#244")), String}, REPL.LineEdit.MIState, REPL.LineEdit.PrefixSearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.CoreLogging.with_logger), getfield(Base.Meta, Symbol("##2#3")){Bool, String}, Atom.Progress.JunoProgressLogger}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.repleval), Module, Expr}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Media.nearest), Type{Nothing}, Type{Any}, Type{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.isactive), Sockets.TCPSocket}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TTYTerminal, REPL.LineEdit.PrefixSearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.transition), getfield(REPL.LineEdit, Symbol("##42#43")){REPL.LineEdit.MIState, REPL.LineEdit.PrefixHistoryPrompt, Base.GenericIOBuffer{Array{UInt8, 1}}, REPL.LineEdit.Prompt}, REPL.LineEdit.MIState, REPL.LineEdit.PrefixHistoryPrompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.REPLHistoryProvider, Symbol, Base.IOStream}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.task_done_hook), Task}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.read), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Char}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.move_input_end), REPL.LineEdit.MIState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{Base.Meta.ParseError}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.print_response), Base.IOContext{REPL.Terminals.TTYTerminal}, Int64, Nothing, Bool, Bool, Nothing}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##250#254")){REPL.LineEdit.PrefixHistoryPrompt}, REPL.LineEdit.MIState, REPL.LineEditREPL, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.isopen), Sockets.TCPSocket}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.buffer), REPL.LineEdit.MIState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##refresh_multi_line#14")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.PrefixSearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Unicode.uppercase), Char}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Atom.handlemsg), String, Base.Dict{String, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base._promote_typejoin), Type{Any}, Type{String}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("#readcb_specialized#489")), Base.TTY, Int64, UInt64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.GenericIOBuffer{Array{UInt8, 1}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.:(==)), Base.Multimedia.TextDisplay, REPL.REPLDisplay{REPL.LineEditREPL}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.edit_move_up), REPL.LineEdit.MIState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.setup_interface), REPL.LineEditREPL, Bool, Array{Base.Dict{Any, Any}, 1}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.print_response), REPL.LineEditREPL, Int64, Nothing, Bool, Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.delete!), Base.Dict{Any, Any}, Type{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##248#252")){REPL.LineEdit.PrefixHistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##249#253")){REPL.LineEdit.PrefixHistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##250#254")){REPL.LineEdit.PrefixHistoryPrompt}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("##251#255")){REPL.LineEdit.PrefixHistoryPrompt}}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.min), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Atom, Symbol("##153#154")), Base.Dict{String, Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.clear_input_area), REPL.Terminals.TerminalBuffer, REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getproperty), REPL.REPLHistoryProvider, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Function}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.Terminals.TTYTerminal, REPL.LineEdit.PrefixSearchState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.match), Base.Regex, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Type{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.mode), REPL.LineEdit.PromptState}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.GenericIOBuffer{Array{UInt8, 1}}, Bool, Bool}, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, REPL.Terminals.TTYTerminal, Base.Pair{Symbol, Bool}, Base.Pair{Symbol, Module}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Function}, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.convert), Type{REPL.Terminals.AbstractTerminal}, REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.write), REPL.Terminals.TerminalBuffer, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.notify), Base.Condition, Nothing, Bool, Bool}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(REPL.LineEdit, Symbol("##Prompt#258")), String, typeof(Base.input_color), Base.Dict{Char, Any}, REPL.LineEditREPL, REPL.REPLCompletionProvider, typeof(REPL.return_callback), getfield(REPL.LineEdit, Symbol("##260#262")), REPL.LineEdit.EmptyHistoryProvider, Bool, Type{REPL.LineEdit.Prompt}, String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.send_to_backend), Expr, Base.Channel{Any}, Base.Channel{Any}}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.setproperty!), REPL.LineEdit.MIState, Symbol, REPL.LineEdit.PrefixHistoryPrompt}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.getproperty), REPL.Terminals.TerminalBuffer, Symbol}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.Terminals.enable_bracketed_paste), REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(CodeTools.getthing), String}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(REPL.LineEdit.deactivate), REPL.LineEdit.Prompt, REPL.LineEdit.PromptState, REPL.Terminals.TerminalBuffer, REPL.Terminals.TTYTerminal}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Expr, Int64}, Int64, Int64}); catch e; @info repr(e) LINE end
LINE = @__LINE__;try;precompile(Tuple{getfield(Base, Symbol("##295#298"))}); catch e; @info repr(e) LINE end
